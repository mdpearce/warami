CREATE TABLE comment (
    commentId INTEGER NOT NULL,
    searchParams TEXT NOT NULL,
    creatorId INTEGER NOT NULL,
    postId INTEGER NOT NULL,
    communityId INTEGER NOT NULL,
    content TEXT NOT NULL,
    isRemoved INTEGER NOT NULL,
    publishedAt TEXT NOT NULL,
    isDeleted INTEGER NOT NULL,
    apId TEXT NOT NULL,
    isLocal INTEGER NOT NULL,
    path TEXT NOT NULL,
    isDistinguished INTEGER NOT NULL,
    languageId INTEGER NOT NULL,
    updatedAt TEXT,
    aggregatesScore INTEGER NOT NULL,
    aggregatesUpVotes INTEGER NOT NULL,
    aggregatesDownVotes INTEGER NOT NULL,
    aggregatesChildCount INTEGER NOT NULL,
    aggregatesHotRank INTEGER NOT NULL,
    isCreatorBannedFromCommunity INTEGER NOT NULL,
    subscribed TEXT NOT NULL,
    isSaved INTEGER NOT NULL,
    isCreatorBlocked INTEGER NOT NULL,
    myVote INTEGER,
    FOREIGN KEY(creatorId) REFERENCES person(id),
    PRIMARY KEY(commentId)
);

CREATE INDEX comment_commentId ON comment (
    commentId
);

CREATE INDEX comment_postId ON comment (
    postId
);

CREATE INDEX comment_postIdSearchParams ON comment (
    postId, searchParams
);

deleteAllForPost:
DELETE FROM comment WHERE postId = :postId;

deleteAllForSearchParams:
DELETE FROM comment WHERE searchParams = :searchParamsId;

insert:
INSERT INTO comment (
    commentId,
    searchParams,
    creatorId,
    postId,
    communityId,
    content,
    isRemoved,
    publishedAt,
    isDeleted,
    apId,
    isLocal,
    path,
    isDistinguished,
    languageId,
    updatedAt,
    aggregatesScore,
    aggregatesUpVotes,
    aggregatesDownVotes,
    aggregatesChildCount,
    aggregatesHotRank,
    isCreatorBannedFromCommunity,
    subscribed,
    isSaved,
    isCreatorBlocked,
    myVote
) VALUES (
    :commentId,
    :searchParams,
    :creatorId,
    :postId,
    :communityId,
    :content,
    :isRemoved,
    :publishedAt,
    :isDeleted,
    :apId,
    :isLocal,
    :path,
    :isDistinguished,
    :languageId,
    :updatedAt,
    :aggregatesScore,
    :aggregatesUpVotes,
    :aggregatesDownVotes,
    :aggregatesChildCount,
    :aggregatesHotRank,
    :isCreatorBannedFromCommunity,
    :subscribed,
    :isSaved,
    :isCreatorBlocked,
    :myVote
);

select:
SELECT comment.*,
    person.name AS creatorName,
    person.isBanned AS creatorIsBanned,
    person.publishedAt AS creatorPublishedAt,
    person.actorId AS creatorActorId,
    person.isLocal AS creatorIsLocal,
    person.isDeleted AS creatorIsDeleted,
    person.isAdmin AS creatorIsAdmin,
    person.isBotAccount AS creatorIsBotAccount,
    person.instanceId AS creatorInstanceId,
    person.displayName AS creatorDisplayName,
    person.avatarUrl AS creatorAvatarUrl,
    person.updatedAt AS creatorUpdatedAt,
    person.bio AS creatorBio,
    person.bannerUrl AS creatorBannerUrl,
    person.matrixUserId AS creatorMatrixUserId,
    person.banExpires AS creatorBanExpires
FROM comment
INNER JOIN person ON comment.creatorId = person.id
WHERE comment.searchParams = :searchParams;

upsert {
    UPDATE comment SET
        searchParams = :searchParams,
        creatorId = :creatorId,
        postId = :postId,
        communityId = :communityId,
        content = :content,
        isRemoved = :isRemoved,
        publishedAt = :publishedAt,
        isDeleted = :isDeleted,
        apId = :apId,
        isLocal = :isLocal,
        path = :path,
        isDistinguished = :isDistinguished,
        languageId = :languageId,
        updatedAt = :updatedAt,
        aggregatesScore = :aggregatesScore,
        aggregatesUpVotes = :aggregatesUpVotes,
        aggregatesDownVotes = :aggregatesDownVotes,
        aggregatesChildCount = :aggregatesChildCount,
        aggregatesHotRank = :aggregatesHotRank,
        isCreatorBannedFromCommunity = :isCreatorBannedFromCommunity,
        subscribed = :subscribed,
        isSaved = :isSaved,
        isCreatorBlocked = :isCreatorBlocked,
        myVote = :myVote
    WHERE commentId = :commentId;

    INSERT OR IGNORE INTO comment (
        commentId,
        searchParams,
        creatorId,
        postId,
        communityId,
        content,
        isRemoved,
        publishedAt,
        isDeleted,
        apId,
        isLocal,
        path,
        isDistinguished,
        languageId,
        updatedAt,
        aggregatesScore,
        aggregatesUpVotes,
        aggregatesDownVotes,
        aggregatesChildCount,
        aggregatesHotRank,
        isCreatorBannedFromCommunity,
        subscribed,
        isSaved,
        isCreatorBlocked,
        myVote
    ) VALUES (
        :commentId,
        :searchParams,
        :creatorId,
        :postId,
        :communityId,
        :content,
        :isRemoved,
        :publishedAt,
        :isDeleted,
        :apId,
        :isLocal,
        :path,
        :isDistinguished,
        :languageId,
        :updatedAt,
        :aggregatesScore,
        :aggregatesUpVotes,
        :aggregatesDownVotes,
        :aggregatesChildCount,
        :aggregatesHotRank,
        :isCreatorBannedFromCommunity,
        :subscribed,
        :isSaved,
        :isCreatorBlocked,
        :myVote
    );
}
